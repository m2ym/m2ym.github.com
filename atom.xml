<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random Notes]]></title>
  <link href="http://m2ym.github.com/atom.xml" rel="self"/>
  <link href="http://m2ym.github.com/"/>
  <updated>2012-04-28T18:07:54+09:00</updated>
  <id>http://m2ym.github.com/</id>
  <author>
    <name><![CDATA[m2ym]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[マクロ内でevalするべきでない理由]]></title>
    <link href="http://m2ym.github.com/blog/2012/04/28/eval-in-macros/"/>
    <updated>2012-04-28T17:00:00+09:00</updated>
    <id>http://m2ym.github.com/blog/2012/04/28/eval-in-macros</id>
    <content type="html"><![CDATA[<p>答え：レキシカル環境が無視されるから。</p>

<p>実例で解説しよう。<a href="http://www.pps.jussieu.fr/~jch/software/cl-yacc/">CL-Yacc</a>というライブラリがある。名前の通りyaccをCommon Lispにポートしたものだ。実装は単純明快で、背景となる理論を知っていればすんなり読めるはずだ。</p>

<p>CL-Yaccは<code>define-parser</code>というマクロを提供しており、ユーザーはこれを用いてパーサーを定義する。以下に簡単な四則演算パーサーの例を示す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">yacc:define-parser</span> <span class="vg">*parser*</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:start-symbol</span> <span class="nv">expression</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:terminals</span> <span class="p">(</span><span class="nc">integer</span> <span class="nb">+</span> <span class="nb">-</span> <span class="nb">*</span> <span class="nb">/</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nv">expression</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">expression</span> <span class="nb">+</span> <span class="nv">expression</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">_</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">_</span><span class="p">))</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">expression</span> <span class="nb">-</span> <span class="nv">expression</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">_</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">_</span><span class="p">))</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">expression</span> <span class="nb">*</span> <span class="nv">expression</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">_</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">_</span><span class="p">))</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">expression</span> <span class="nb">/</span> <span class="nv">expression</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">_</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">_</span><span class="p">))</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</span><span class='line'>   <span class="nc">integer</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>セマンティックアクションがすべて類似していることに気付くだろう。試しに<code>macrolet</code>を使って以下のように書きかえてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="k">macrolet</span> <span class="p">((</span><span class="nv">app</span> <span class="p">(</span><span class="nv">op</span><span class="p">)</span>
</span><span class='line'>             <span class="o">`</span><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">_</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">_</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="o">,</span><span class="nv">op</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">yacc:define-parser</span> <span class="vg">*parser*</span>
</span><span class='line'>    <span class="p">(</span><span class="ss">:start-symbol</span> <span class="nv">expression</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="ss">:terminals</span> <span class="p">(</span><span class="nc">integer</span> <span class="nb">+</span> <span class="nb">-</span> <span class="nb">*</span> <span class="nb">/</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nv">expression</span>
</span><span class='line'>     <span class="p">(</span><span class="nv">expression</span> <span class="nb">+</span> <span class="nv">expression</span> <span class="p">(</span><span class="nv">app</span> <span class="nb">+</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="nv">expression</span> <span class="nb">-</span> <span class="nv">expression</span> <span class="p">(</span><span class="nv">app</span> <span class="nb">-</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="nv">expression</span> <span class="nb">*</span> <span class="nv">expression</span> <span class="p">(</span><span class="nv">app</span> <span class="nb">*</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="nv">expression</span> <span class="nb">/</span> <span class="nv">expression</span> <span class="p">(</span><span class="nv">app</span> <span class="nb">/</span><span class="p">))</span>
</span><span class='line'>     <span class="nc">integer</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>ネストは深くなったが、パーサー定義はより簡潔になったはずだ。しかし、この新しい定義を評価（コンパイル）すると<code>The function APP is undefined.</code>というエラーが発生する。なぜか。</p>

<p>CL-Yaccは<strong>マクロ展開時</strong>にパーサーテーブルを生成する。そのとき、セマンティックアクションも関数形式に変換して同テーブルに格納する。このような手順をとる場合、セマンティックアクションとして<code>define-parser</code>に記述されたフォーム（先の例では<code>(lambda (a _ b) ...)</code>）は<code>eval</code>で評価せざるを得ない。</p>

<p><code>eval</code>に渡されたフォームは空レキシカル環境、つまりグローバル環境上で評価される。空レキシカル環境上で評価されるということは、<code>symbol-macrolet</code>や<code>macrolet</code>などのレキシカル環境に作用するオペレータが全く無効になるということである（たとえ字句的に包含していようが）。したがって、上記の<code>APP</code>は見えなかったというわけである。</p>

<p>この問題は全くもってLispの力を制限するものであるから、本当に必要なときを除いて、特にマクロ展開中は、<code>eval</code>は使わないようにすべきである。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初投稿]]></title>
    <link href="http://m2ym.github.com/blog/2012/04/21/first-post/"/>
    <updated>2012-04-21T23:09:00+09:00</updated>
    <id>http://m2ym.github.com/blog/2012/04/21/first-post</id>
    <content type="html"><![CDATA[<p>Octopressでブログを初めることにした。Markdown記法で書けるのが主な理由。テストがてら投稿してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">print</span>
</span><span class='line'> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">1</span> <span class="nv">to</span> <span class="mi">100</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="nb">zerop</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">i</span> <span class="mi">15</span><span class="p">))</span>
</span><span class='line'>         <span class="nv">collect</span> <span class="s">&quot;Fizz Buzz&quot;</span>
</span><span class='line'>       <span class="nv">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">zerop</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">i</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>         <span class="nv">collect</span> <span class="s">&quot;Fizz&quot;</span>
</span><span class='line'>       <span class="nv">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">zerop</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">i</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>         <span class="nv">collect</span> <span class="s">&quot;Buzz&quot;</span>
</span><span class='line'>       <span class="nv">else</span>
</span><span class='line'>         <span class="nv">collect</span> <span class="nv">i</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
